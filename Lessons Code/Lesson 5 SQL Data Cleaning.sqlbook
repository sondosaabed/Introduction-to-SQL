-- SQLBook: Markup
Quiz: LEFT & RIGHT

    In the accounts table, there is a column holding the website for each company. The last three digits specify what type of web address they are using. A list of extensions (and pricing) is provided iwantmyname.com. Pull these extensions and provide how many of each website type exist in the accounts table.
    There is much debate about how much the name (or even the first letter of a company name) matters. Use the accounts table to pull the first letter of each company name to see the distribution of company names that begin with each letter (or number).
    Use the accounts table and a CASE statement to create two groups: one group of company names that start with a number and the second group of those company names that start with a letter. What proportion of company names start with a letter?
    Consider vowels as a, e, i, o, and u. What proportion of company names start with a vowel, and what percent start with anything else?
-- SQLBook: Code
SELECT RIGHT(website, 3) AS domain, COUNT(*) num_companies
FROM accounts
GROUP BY 1
ORDER BY 2 DESC;

SELECT LEFT(UPPER(name), 1) AS first_letter, COUNT(*) num_companies
FROM accounts
GROUP BY 1
ORDER BY 2 DESC;

SELECT SUM(num) nums, SUM(letter) letters
FROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9') 
                          THEN 1 ELSE 0 END AS num, 
            CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9') 
                          THEN 0 ELSE 1 END AS letter
         FROM accounts) t1;

SELECT SUM(vowels) vowels, SUM(other) other
FROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U') 
                           THEN 1 ELSE 0 END AS vowels, 
             CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U') 
                          THEN 0 ELSE 1 END AS other
            FROM accounts) t1;
-- SQLBook: Markup
Quiz: CONCAT, LEFT, RIGHT, and SUBSTR

    Suppose the company wants to assess the performance of all the sales representatives. Each sales representative is assigned to work in a particular region. To make it easier to understand for the HR team, display the concatenated sales_reps.id, ‘_’ (underscore), and region.name as EMP_ID_REGION for each sales representative.

    From the accounts table, display the name of the client, the coordinate as concatenated (latitude, longitude), email id of the primary point of contact as <first letter of the primary_poc><last letter of the primary_poc>@<extracted name and domain from the website>.

    From the web_events table, display the concatenated value of account_id, '_' , channel, '_', count of web events of the particular channel
-- SQLBook: Code
SELECT CONCAT(s.id, '_', r.name) as emp_ID_region, 
s.name
FROM sales_reps s
JOIN region r
ON s.region_id = r.id;
   
SELECT name, 
CONCACT(lat,', ',long) Coordination,
CONCAT(LEFT(primary_poc, 1),
       RIGHT(primary_poc, 1), '@', SUBSTR(website, 5)) email
FROM accounts;
                                          
WITH t1 as (
  select account_id, channel, count(*)
  from web_events
  group by account_id, channel
  order by account_id, channel
)
select concat(t1.account_id, '_', t1.channel, '_', count)
      from t1;
-- SQLBook: Markup
Quiz: CAST
-- SQLBook: Code
select *
from sf_crime_data
order by incidnt_num
limit 10;
                                                 
SELECT date orig_date, (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2))::DATE new_date
FROM sf_crime_data;     
                                                                                                                                                                                                                                                                                                                   
-- SQLBook: Markup
Quiz: POSITION, STRPOS

You will need to use what you have learned about LEFT & RIGHT, as well as what you know about POSITION or STRPOS to do the following quizzes.

    Use the accounts table to create first and last name columns that hold the first and last names for the primary_poc.

    Now see if you can do the same thing for every rep name in the sales_reps table. Again provide first and last name columns.

-- SQLBook: Code
SELECT substr(primary_poc, 0, STRPOS(primary_poc, ' ')) as first_name,                             substr(primary_poc,STRPOS(primary_poc, ' ')) as last_name, primary_poc
FROM accounts;
     
SELECT substr(name, 0, STRPOS(name, ' ')) as first_name,                             
substr(name,STRPOS(name, ' ')) as last_name,                                                                                                                          
name                                                                                                                        
FROM sales_reps;
-- SQLBook: Markup
Quiz: CONCAT & STRPOS - Bringing it together

    Each company in the accounts table wants to create an email address for each primary_poc. The email address should be the first name of the primary_poc . last name primary_poc @ company name .com.

    You may have noticed that in the previous solution some of the company names include spaces, which will certainly not work in an email address. See if you can create an email address that will work by removing all of the spaces in the account name, but otherwise, your solution should be just as in question 1. Some helpful documentation is here.

    We would also like to create an initial password, which they will change after their first log in. The first password will be the first letter of the primary_poc's first name (lowercase), then the last letter of their first name (lowercase), the first letter of their last name (lowercase), the last letter of their last name (lowercase), the number of letters in their first name, the number of letters in their last name, and then the name of the company they are working with, all capitalized with no spaces.

-- SQLBook: Code
SELECT trim(' ' FROM concat(
  substr(primary_poc, 0, strpos(primary_poc, ' ')),
         '.'
         ,substr(primary_poc, strpos(primary_poc, ' '))
                                     ,'@', name,'.com')) email
FROM accounts
                 order by 1;

                                 
-- SQLBook: Markup
Quiz: COALESCE
-- SQLBook: Code
SELECT *
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;

SELECT COALESCE(a.id, a.id) id_filled, 
a.name,
a.website,
a.lat,
a.long,
a.primary_poc,
a.sales_rep_id,
COALESCE(o.account_id, a.id) account_id,
o.occurred_at,
o.standard_qty,
o.gloss_qty,
o.poster_qty,
o.total,
o.standard_amt_usd,
o.gloss_amt_usd,
o.poster_amt_usd,
o.total_amt_usd
FROM accounts a
JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;



SELECT COALESCE(a.id, a.id) filled_id, 
a.name, a.website, 
a.lat, 
a.long, 
a.primary_poc, 
a.sales_rep_id, 
COALESCE(o.account_id, a.id) account_id, 
o.occurred_at, 
o.standard_qty, o.gloss_qty, 
o.poster_qty, 
o.total, 
o.standard_amt_usd, 
o.gloss_amt_usd, o.poster_amt_usd, 
o.total_amt_usd
FROM accounts a
JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;

SELECT COALESCE(a.id, a.id) filled_id, 
a.name, 
a.website, 
a.lat, 
a.long,
a.primary_poc, 
a.sales_rep_id, 
COALESCE(o.account_id, a.id) account_id, o.occurred_at, 
COALESCE(o.standard_qty, 0) standard_qty, 
COALESCE(o.gloss_qty,0) gloss_qty, 
COALESCE(o.poster_qty,0) poster_qty, 
COALESCE(o.total,0) total, 
COALESCE(o.standard_amt_usd,0) standard_amt_usd, 
COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, 
COALESCE(o.poster_amt_usd,0) poster_amt_usd, 
COALESCE(o.total_amt_usd,0) total_amt_usd
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;

SELECT COUNT(*)
FROM accounts a
JOIN orders o
ON a.id = o.account_id;

SELECT COALESCE(a.id, a.id) id_filled, 
a.name,
a.website,
a.lat,
a.long,
a.primary_poc,
a.sales_rep_id,
COALESCE(o.account_id, a.id) account_id, 
o.occurred_at,
COALESCE(o.standard_qty, 0) standard_qty, 
COALESCE(o.gloss_qty,0) gloss_qty, 
COALESCE(o.poster_qty,0) poster_qty,
COALESCE(o.total,0) total, 
COALESCE(o.standard_amt_usd,0) standard_amt_usd, 
COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, 
COALESCE(o.poster_amt_usd,0) poster_amt_usd, 
COALESCE(o.total_amt_usd,0) total_amt_usd
FROM accounts a
JOIN orders o
ON a.id = o.account_id;
