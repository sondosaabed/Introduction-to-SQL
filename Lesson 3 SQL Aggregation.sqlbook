-- SQLBook: Markup
In this lesso I learn about SQL aggregation:
-- SQLBook: Markup
Quiz: SUM

Use the SQL environment below to assist with answering the following questions. If get stuck or you just want to double-check your solutions, see my answers on the next page.

    Find the total amount of poster_qty paper ordered in the orders table.
    Find the total amount of standard_qty paper ordered in the orders table.
    Find the total dollar amount of sales using the total_amt_usd in the orders table.
    Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. This should give a dollar amount for each order in the table.
    Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both aggregation and a mathematical operator.
-- SQLBook: Code
SELECT SUM(poster_qty) AS total_poster_sales
FROM orders;
SELECT SUM(standard_qty) AS total_standard_sales
FROM orders;
SELECT SUM(total_amt_usd) AS total_dollar_sales
FROM orders;
SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
FROM orders;
-- SQLBook: Markup
Quiz: MIN, MAX, & AVG

Use the SQL environment below to assist with answering the following questions. If get stuck or you want to double-check your solutions, see my answers on the next page.

    When was the earliest order ever placed? You only need to return the date.
    Try performing the same query as in question 1 without using an aggregation function.
    When did the most recent (latest) web_event occur?
    Try to perform the result of the previous query without using an aggregation function.
    Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.
    Via the video, you might be interested in how to calculate the MEDIAN. Though this is more advanced than what we have covered so far try finding - what is the MEDIAN total_usd spent on all orders?
-- SQLBook: Code
SELECT MIN(occurred_at) 
FROM orders;

SELECT occurred_at 
FROM orders 
ORDER BY occurred_at
LIMIT 1;

SELECT MAX(occurred_at)
FROM web_events;

SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1;

SELECT AVG(standard_qty) mean_standard, AVG(gloss_qty) mean_gloss, 
        AVG(poster_qty) mean_poster, AVG(standard_amt_usd) mean_standard_usd, 
        AVG(gloss_amt_usd) mean_gloss_usd, AVG(poster_amt_usd) mean_poster_usd
FROM orders;

SELECT *
FROM (SELECT total_amt_usd
   FROM orders
   ORDER BY total_amt_usd
   LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;
-- SQLBook: Markup
Quiz: GROUP BY
Use the SQL environment below to assist with answering the following questions. If get stuck or you want to double-check your solutions, see my answers on the next page.

One part that can be difficult to recognize is when it might be easiest to use an aggregate or one of the other SQL functionalities. Try some of the below to see if you can differentiate to find the easiest solution.

    Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.

    Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name.

    Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? Your query should return only three values - the date, channel, and account name.

    Find the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and the number of times the channel was used.

    Who was the primary contact associated with the earliest web_event?

    What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd. Order from smallest dollar amounts to largest.

    Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. Order from the fewest reps to most reps.

-- SQLBook: Code
SELECT a.name, o.occurred_at
FROM accounts a
JOIN orders o
ON a.id = o.account_id
ORDER BY occurred_at
LIMIT 1;

SELECT a.name, SUM(total_amt_usd) total_sales
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.name;


SELECT w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id 
ORDER BY w.occurred_at DESC
LIMIT 1;

SELECT w.channel, COUNT(*)
FROM web_events w
GROUP BY w.channel;


SELECT a.primary_poc
FROM web_events w
JOIN accounts a
ON a.id = w.account_id
ORDER BY w.occurred_at
LIMIT 1;

SELECT a.name, MIN(total_amt_usd) smallest_order
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name
ORDER BY smallest_order;

-- SQLBook: Markup
Quiz: GROUP BY Part II

Use the SQL environment below to assist with answering the following questions. If get stuck or you want to double-check your solutions, see my answers on the next page.

    For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average quantity purchased for each of the paper types for each account.

    For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.

    Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

    Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

-- SQLBook: Code
SELECT a.name, AVG(o.standard_qty) avg_stand, AVG(o.gloss_qty) avg_gloss, AVG(o.poster_qty) avg_post
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name;

SELECT a.name, AVG(o.standard_amt_usd) avg_stand, AVG(o.gloss_amt_usd) avg_gloss, AVG(o.poster_amt_usd) avg_post
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name;

SELECT s.name, w.channel, COUNT(*) num_events
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name, w.channel
ORDER BY num_events DESC;

SELECT r.name, w.channel, COUNT(*) num_events
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name, w.channel
ORDER BY num_events DESC;

-- SQLBook: Markup
Quiz: DISTINCT

Use the SQL environment below to assist with answering the following questions. If get stuck or you want to double-check your solutions, see my answers on the next page.

    Use DISTINCT to test if there are any accounts associated with more than one region.
    Have any sales reps worked on more than one account?
-- SQLBook: Code
SELECT DISTINCT id, name
FROM accounts;

SELECT DISTINCT id, name
FROM sales_reps;

-- SQLBook: Markup
QUIZ: Having

Use the SQL environment below to assist with answering the following questions. If get stuck or you want to double-check your solutions, see my answers on the next page..

    How many of the sales reps have more than 5 accounts that they manage?
    How many accounts have more than 20 orders?
    Which account has the most orders?
    Which accounts spent more than 30,000 usd total across all orders?
    Which accounts spent less than 1,000 usd total across all orders?
    Which account has spent the most with us?
    Which account has spent the least with us?
    Which accounts used facebook as a channel to contact customers more than 6 times?
    Which account used facebook most as a channel?
    Which channel was most frequently used by most accounts?
-- SQLBook: Code
SELECT s.id, s.name, COUNT(*) num_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
HAVING COUNT(*) > 5
ORDER BY num_accounts;

SELECT COUNT(*) num_reps_above5
FROM(SELECT s.id, s.name, COUNT(*) num_accounts
  FROM accounts a
  JOIN sales_reps s
  ON s.id = a.sales_rep_id
  GROUP BY s.id, s.name
  HAVING COUNT(*) > 5
  ORDER BY num_accounts) AS Table1;

  SELECT a.id, a.name, COUNT(*) num_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING COUNT(*) > 20
ORDER BY num_orders;

SELECT a.id, a.name, COUNT(*) num_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY num_orders DESC
LIMIT 1;

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) > 30000
ORDER BY total_spent;

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) < 1000
ORDER BY total_spent;

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent DESC
LIMIT 1;


SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent
LIMIT 1;


SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*) > 6 AND w.channel = 'facebook'
ORDER BY use_of_channel;


SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE w.channel = 'facebook'
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 1;

-- SQLBook: Markup
Quiz: DATE Functions

Use the SQL environment below to assist with answering the following questions. If you get stuck or you want to double-check your solutions, you can see my solutions on the next page.

    Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?

    Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?

    Which year did Parch & Posey have the greatest sales in terms of the total number of orders? Are all years evenly represented by the dataset?

    Which month did Parch & Posey have the greatest sales in terms of the total number of orders? Are all months evenly represented by the dataset?

    In which month of which year did Walmart spend the most on gloss paper in terms of dollars?

-- SQLBook: Code
SELECT DATE_PART('year', occurred_at) ord_year,  SUM(total_amt_usd) total_spent
FROM orders
GROUP BY 1
ORDER BY 2 DESC;


SELECT DATE_PART('month', occurred_at) ord_month, SUM(total_amt_usd) total_spent
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC; 


SELECT DATE_PART('year', occurred_at) ord_year,  COUNT(*) total_sales
FROM orders
GROUP BY 1
ORDER BY 2 DESC;


SELECT DATE_PART('month', occurred_at) ord_month, COUNT(*) total_sales
FROM orders
WHERE DATE_PART('year', occurred_at) BETWEEN 2014 AND 2016
GROUP BY 1
ORDER BY 2 DESC;

SELECT DATE_TRUNC('month', o.occurred_at) ord_date, SUM(o.gloss_amt_usd) tot_spent
FROM orders o 
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- SQLBook: Markup
Quiz: CASE

Use the SQL environment below to assist with answering the following questions. If you get stuck or you want to double-check your solutions, see my solutions on the next page.

    Write a query to display for each order, the account ID, the total amount of the order, and the level of the order - ‘Large’ or ’Small’ - depending on if the order is $3000 or more, or smaller than $3000.

    Write a query to display the number of orders in each of three categories, based on the total number of items in each order. The three categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.

    We would like to understand 3 different levels of customers based on the amount associated with their purchases. The top-level includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second level is between 200,000 and 100,000 usd. The lowest level is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.

    We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.

    We would like to identify top-performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top salespeople first in your final table.

    The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these characteristics represented as well. We would like to identify top-performing sales reps, which are sales reps associated with more than 200 orders or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name, the total number of orders, total sales across all orders, and a column with top, middle, or low depending on these criteria. Place the top salespeople based on the dollar amount of sales first in your final table. You might see a few upset salespeople by this criteria!

-- SQLBook: Code
SELECT a.id,
o.total, 
CASE WHEN o.total >= 3000 THEN 'Large' 
ELSE 'Small'
END
FROM accounts a
JOIN orders o
ON a.id = o.account_id;

SELECT COUNT(o.id), 
CASE WHEN o.total <=2000 THEN 'At Least 2000'
WHEN o.total BETWEEN 1000 AND 2000 THEN 'Between 1000 and 2000'
WHEN o.total < 1000 THEN 'Less than 1000' 
END as case1
FROM orders o
GROUP BY case1,o.total ;

SELECT a.name, 
SUM(o.total) as tottal, 
CASE WHEN 
SUM(o.total) >200000 THEN 'top-level'
WHEN 
SUM(o.total) BETWEEN 200000 AND 100000 THEN 'second-level'
WHEN 
SUM(o.total) <100000 THEN 'low-level'
END AS level
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name, o.total
ORDER BY tottal DESC;

SELECT a.id, 
DATE_TRUNC('year',o.occurred_at),
o.total, 
CASE WHEN o.total >= 3000 THEN 'Large' 
ELSE 'Small'
END
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, o.occurred_at, o.total
HAVING DATE_TRUNC('year',o.occurred_at) ='2016-01-01T00:00:00.000Z' OR DATE_TRUNC('year',o.occurred_at) ='2017-01-01T00:00:00.000Z';

SELECT s.name, 
COUNT(o.id), 
CASE WHEN COUNT(o.id) > 200 THEN 'top-performing'
ELSE 'not-top'
END AS performing
FROM sales_reps s
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN orders o
ON o.account_id = a.id
GROUP BY 1
ORDER BY 2 DESC;

SELECT s.name, 
	COUNT(o.id) num,
    SUM(o.total_amt_usd) total,
    CASE WHEN COUNT (o.id) > 200 OR
    SUM(o.total_amt_usd) > 750000 
    THEN 'top-performing'
    WHEN COUNT(o.id) BETWEEN 150 AND 200
    OR SUM(o.total_amt_usd) BETWEEN 500000 AND 750000
    THEN 'mid-performing'
    ELSE 'low-performing'
    END AS performing
FROM sales_reps s
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN orders o
ON o.account_id = a.id
GROUP BY 1
ORDER BY total DESC;
-- SQLBook: Markup
